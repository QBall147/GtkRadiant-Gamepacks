<HTML>
<HEAD>
<TITLE>Q3Map2 Shader Manual: Q3Map2 Specific Shader Keywords</TITLE>
<LINK REL="stylesheet" TYPE="text/css" HREF="scripts/styles.css">
</HEAD>

<BODY MARGINWIDTH="0" MARGINHEIGHT="0" LEFTMARGIN="0" TOPMARGIN="0" LINK="#28648C" VLINK="#28648C" ALINK="#28648C">
<FONT FACE="verdana, helvetica, arial">

<TABLE WIDTH="600" CELLSPACING="0" CELLPADDING="0" BORDER="0" ALIGN="center">
<TR>
	<TD VALIGN="top"><FONT SIZE="2">


<!--// HEADER START //-->
<BR><BR>
<FONT SIZE="3"><B>3 - Q3Map2 Specific Shader Keywords</B></FONT><BR>
<HR SIZE="1">
<FONT SIZE="1">Q3Map2 Shader Manual</FONT><BR><BR><BR>
<!--// HEADER END //-->

These keywords change the physical nature of the textures and the brushes that are marked with them. Changing any of these values will require the map to be re-compiled. These are global and affect the entire shader.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="alphagen"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_alphaGen <I>func ---</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->

blah<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="alphamod"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_alphaMod <I>func ---</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


This is used for special blending effects on shaders by altering the amount of blending falloff depending on specific surface properties such as the surfaces normal axis or the vertexes contained within its volume. <I>alphaMod</I> operations are applied to an object's vertexes so the <I>rgbGen vertex</I> directive is required for each affected stage.<BR><BR>

<BR><B>q3map_alphaMod <I>dotproduct</I> ( <I>X Y Z</I>)</B><BR>
It is used to blend textures using <I>alphaFunc</I> or <I>blendFunc</I> in the shader's second pass, with the falloff depending on the surface's normal axis. This is achieved by doing a vector dot product of the specified normalized vector value ( X Y Z ) and the vertex normal which yields the amount of blending. The dot product operation multiplies each element of one vector against the corresponding elements of a second vector, then adds them. Examples:<BR><BR>

<FONT SIZE="1">
( 0 0 1 ) dp ( 0 0 1 ) = 0 * 0 + 0 * 0 + 1 * 1 = 1<BR>
( 0 0 1 ) dp ( 0 0 0.5 ) = 0 * 0 + 0 * 0 + 1 * 0.5 = 0.5<BR>
( 0.5 0.5 1 ) dp ( 0 0.5 0.5 ) = 0.5 * 0 + 0.5 * 0.5 + 1 * 0.5 = 0.75<BR><BR>
</FONT>

<BR><B>q3map_alphaMod <I>dotproduct2</I> ( <I>X Y Z</I> )</B><BR>
This works in a similar way to <I>dotproduct</I> except it exaggerates the differences in vertex normals by squaring the final dot product value. With the same values as the above example, <I>dotproduct2</I> would give the following:<BR><BR>

<FONT SIZE="1">
[ ( 0 0 1 ) dp ( 0 0 1 ) ]<SUP>2</SUP> = ( 0 * 0 + 0 * 0 + 1 * 1 )<SUP>2</SUP> = 1<BR>
[ ( 0 0 1 ) dp ( 0 0 0.5 ) ]<SUP>2</SUP> = ( 0 * 0 + 0 * 0 + 1 * 0.5 )<SUP>2</SUP> = 0.25<BR>
[ ( 0.5 0.5 1 ) dp ( 0 0.5 0.5 ) ]<SUP>2</SUP> = ( 0.5 * 0 + 0.5 * 0.5 + 1 * 0.5 )<SUP>2</SUP> = 0.5625
</FONT><BR><BR><BR>


<!--// SCRIPT START //-->
<PRE STYLE="margin-top: 0em"><FONT FACE="verdana, helvetica, arial" SIZE="1"><I>Script: q3map_dotproduct on terrain</I><HR SIZE="1">
textures/shaderlab_vector_1/rock_1_z_lodterrain
{
	//Used for radiosity lighting
	q3map_lightImage textures/shaderlab_vector_1/rock_1.tga

	q3map_nonplanar
	q3map_shadeAngle 179
	q3map_tcGen ivector ( 512 0 0 ) ( 0 512 0 )
	q3map_tcMod rotate 33
	q3map_lightmapAxis z

	// this means dot product squared, for faster falloff between vertical and horizontal planes
	q3map_alphaMod dotproduct2 ( 0 0 0.95 )

	surfaceparm nonsolid
	surfaceparm pointlight

	{
		map textures/shaderlab_vector_1/rock_1.tga
		rgbGen vertex
	}
	{
		map textures/slterra/sand_1.tga
		blendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA
		rgbGen vertex
	}
}
<HR SIZE="1"></FONT></PRE>
<!--// SCRIPT END //--><BR>

<B>Design Notes:</B><BR>
Typical examples of use include snow covering the top faces of objects, or terrain with grass growing on horizontal planes blending into rocky cliffs on near vertical surfaces. It is an excellent way of automatically creating realistic alpha-blended terrain without the complicated steps in setting up an alpha map.<BR><BR>


<BR><B>q3map_alphaMod <I>scale</I> <I>N.N</I></B><BR>
Used in conjunction with <I>q3map_alphaMod volume</I>. Scales the vertex alpha by N.N.<BR><BR>

<BR><B>q3map_alphaMod <I>set</I> <I>N.N</I></B><BR>
Used in conjunction with <I>q3map_alphaMod volume</I>. Sets the vertex alpha (regardless of any previous alpha values) to N.N * 255.<BR><BR>

<BR><B>q3map_alphaMod <I>volume</I></B><BR>
This was created as a way to explicitly set the amount of vertex alpha-blending by altering the alpha values of vertexes contained within a brush volume marked with this shader directive. Applies all other q3map_alphaMod directives to each vertex inside a brush textured with this shader, allowing large faded scrolling fire shaders, waterfalls, marquees, explicit dotProduct terrain blending control, etc.<BR><BR>

<B>Design Notes:</B><BR>
This is usually used in special alphaMod volume "common" shaders for use within the editor only. A brush textured with the alphaMod volume shader is used to overlap the vertexes of another brush using an alpha-blended shader, altering the vertex alpha values. Worldspawn alphaMod volume brushes will affect all surfaces. You can func_group an alphaMod volume brush to affect only that entity.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="backshader"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_backShader <I>shadername</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


This allows a brush to use a different shader when you are inside it looking out. By way of example, this would allow a water brush (or other) surfaces to have a different <A HREF="ch2.htm#sort"><I>sort</I></A> order or appearance when seen from the inside. <I>q3map_backShader</I> only works on brush faces. For this reason, it is deprecated in favor of using <A HREF="ch3.htm#cloneshader"><I>q3map_cloneShader</I></A> where the target shader contains <A HREF="ch3.htm#invert"><I>q3map_invert</I></A>.<BR><BR>

<!--// PUT EXAMPLE SHADER HERE //-->


<!--// TITLE START //-->
<BR><A NAME="backsplash"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_backSplash <I>percentage distance</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


A surface light is lit by itself, often causing areas of higher light intensity than other areas. <I>q3map_backSplash</I> moves the light source away from the surface of the shader, allowing it to create smoother lighting over the face. By default, all shaders are assigned backsplash values, 0.05 for the percentage, 23 units for the distance.<BR><BR>

<UL>
<B><I>percentage</I></B> : Specifies the intensity percentage of the light generated by <A HREF="ch3.htm#surfacelight"><I>q3map_surfacelight</I></A> to be redirected back at the surface. Use a value of 0 or a negative value to disable back splash lights.<BR>
<B><I>distance</I></B> : Distance of the back splash lights from the surface.
</UL>


<!--// TITLE START //-->
<BR><A NAME="baseshader"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_baseShader <I>shadername</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Allows shaders to be subclassed (Q3Map2 relevant portions only, such as surfaceparms, lighting, texture projection, etc). Subclassed shaders can reference the base shader by referring to the base shader's name. In order for <I>q3map_baseShader</I> to work correctly, the base shader must be specified before any shaders that subclass it. Some <I>EasyGen</I> terrain templates incorrectly specified the base shader after the terrain shaders that depended on it, resulting in some interesting errors.<BR><BR>

This is fundamentally the reverse of <A HREF="ch3.htm#remapshader"><I>q3map_remapShader</I></A>. Use <I>q3map_baseShader</I> when a single group of q3map_* directives is required for multiple base shaders. Use <I>q3map_remapShader</I> when similar shaders are used that require different groups of q3map_* directives.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="bounce"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_bounce <I>N.N</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Deprecated! Use <A HREF="ch3.htm#bouncescale">q3map_bounceScale</A> instead.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="bouncescale"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_bounceScale <I>N.N</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Use a number between 0 and 1.0 (or higher), to scale the amount of light reflected in radiosity passes. You can oversaturate it by using a number higher than 1.0, but this can lead to excessive compile times. Using 90 would probably make things positively glacial. 1.0 is a default, fudged number that looked OK with the maps that were tested. Tweaking it to 1.5 or 2.0 won't hurt anything, per se, but it does give you finer control over how each shader re-emits light. The poorly worded <I>q3map_bounce</I> has been renamed to <I>q3map_bounceScale</I>. While its use has been deprecated, <I>q3map_bounce</I> still works.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="clipmodel"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_clipModel</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Automatically clips misc_model entities for player and weapon collision. This should only be used on large models such as terrain (not small decorative models - manually clip those). The shader's surfaceparms are inherited by the magic clip brush, so if you have <I>surfaceparm nonsolid</I> in your model's shader that uses <I>q3map_clipModel</I>, then the brush will also be non-solid. This can also be set on a per model basis with spawnflags 2.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="cloneshader"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_cloneShader <I>shadername</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


A shader with this keyword will inherit the target shader's properties and appearance. Be careful, this can lead to an infinite loop if a cloning shader references another cloning shader or itself.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="colorgen"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_colorGen <I></I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->

blah<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="colormod"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_colorMod <I></I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->

blah<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="extrashader"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_extraShader</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Does not exist!<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="fadealpha"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_fadeAlpha <I>N</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Does not exist!<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="fogdir"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_fogDir <I>angle</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Specifies the direction a fog shader fades from transparent to opaque.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="forcemeta"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_forceMeta</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Forces model (MD3, ASE, etc.) surfaces to be broken down into their component triangles like brush faces and passed through the meta code on a per shader basis. This is required for lightmapped models. Setting spawnflags 4 on a misc_model will set <I>q3map_forceMeta</I> on all its surfaces.<BR><BR>

<!--<B>//obsidian: check this info...</B><BR>
Meta is usually turned on using the -meta BSP switch. It breaks down all geometry to its base triangles and rehashes them together. You probably won't need to set this keyword in your shaders since you should be compiling with -meta anyway.<BR><BR>-->


<!--// TITLE START //-->
<BR><A NAME="forcesunlight"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_forceSunlight</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Obsolete!<BR>
By default, no sunlight is cast on vertex-lit .md3 models or vertex-lit terrain. Using this option, sunlight (overbright bits created by the q3map_sun option) will be cast on these surfaces. <I>q3map_forceSunlight</I> is now obsolete since suns are now first class light sources.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="fur"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_fur <I>layers offset fade</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


This is used for generating fur over a surface. This is typically used in conjunction with <A HREF="ch3.htm#cloneshader"><I>q3map_cloneShader</I></A> in the surface (parent) shader and references the fur shader as the clone. A possible application of this is to create grass on alphablended terrain. Keep in mind that the use of a fur shader may cause a large hit to performance but when used sparingly, it can produce some interesting effects. (See <A HREF="'+address+'.htm">Appendix D: Fur</A>)<BR>

<UL>
<B><I>layers</I></B> : This specifies the number of desired replicated fur layers generated.<BR><BR>
<B><I>offset</I></B> : The distance (in game units) between subsequent layers.<BR><BR>
<B><I>fade</I></B> : A normalized value indicating the fade falloff between subsequent layers.<BR><BR>
</UL>


<!--// TITLE START //-->
<BR><A NAME="globaltexture"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_globalTexture</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Use this shader in the global keyword commands whenever the <I>tcMod scale</I> function is used in one of the later render stages. Many problems with getting shader effects to work across multiple adjacent brushes are a result of the way Q3Map2 optimizes texture precision. This option resolves that, but at the expense of some precision of the textures when they are far away from the origin of the map.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="indexed"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_indexed</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


This is used for explicit terrain-style indexed mapping. It instructs Q3Map2 to look at the func_group terrain entity's _indexmap key for an image to pull index values from, and then to construct a shader name with the root based on the _shader key's value.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="invert"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_invert</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Inverts a surface normal. Works on brush faces, models and patches. Used in celshading to achieve the inverted backfacing hull.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="lightimage"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_lightImage <I>texturename</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


By default, surface lights use the average color of the source image to generate the color of the light. <I>q3map_lightImage</I> specifies an alternate image to be used for light color emission, radiosity color emission, light filtering and alpha shadows. You can even use a light image with a different alpha channel for blurrier alpha shadows. The light color is averaged from the referenced texture. The texture must be the same size as the base image map. <I>q3map_lightImage</I> should appear before <A HREF="ch5.htm#editorimage"><I>qer_editorImage</I></A>.<BR><BR>

The reason <I>q3map_lightImage</I> is specified for the light in the example below, is because the blend map is predominantly yellow, but the base image is not. The designer wanted the color of the light to be sampled from the blend map instead of the base image.<BR><BR>


<!--// SCRIPT START //-->
<PRE STYLE="margin-top: 0em"><FONT FACE="verdana, helvetica, arial" SIZE="1"><I>Script: Taking light from another source image</I><HR SIZE="1">
textures/eerie/ironcrosslt2_10000
{
	q3map_lightImage textures/gothic_light/ironcrosslt2.blend.tga
	// this TGA is the source for the color of the blended light

	qer_editorImage textures/gothic_light/ironcrosslt2.tga
	//editor TGA (used because the shader is used with several different light values)

	q3map_surfacelight 10000
	//emitted light value of 10,000

	{
		map $lightmap
		//source texture is affected by the lightmap
		rgbGen identity
		// this command handles the overbright bits created by "sunlight" in the game
	}
	{
		map textures/gothic_light/ironcrosslt2.tga
		blendFunc filter
		rgbGen identity
	}
	{
		maptextures/gothic_light/ironcrosslt2.blend.tga
		blendFunc add
	}
}
<HR SIZE="1"></FONT></PRE>
<!--// SCRIPT END //-->


<!--// TITLE START //-->
<BR><A NAME="lightmapaxis"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_lightmapAxis <I>axis</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Takes a single argument: either x, y or z. The keyword <A HREF="ch3.htm#terrain"><I>q3map_terrain</I></A> has an implicit (read default) <I>q3map_lightmapAxis</I> defined as z. This keyword is not recommended for things like caves or arches which have undersides.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="lightmapbrightness"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_lightmapBrightness <I>N.N</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Lightmap brightness scaling. A value of 2.0 will be twice as bright (linearly) and a value of 0.5 will be half as bright.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="lightmapfilterradius"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_lightmapFilterRadius <I>self other</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


This is usually used on light emitting shaders to approximate finer subdivided lighting. It adds a gaussian blur effect to the lightmaps of either the shader itself, or the surfaces affected by the shader, or both. The values for <I>self</I> and <I>other</I> are measured in world units of filtering (blurring) of lightmap data cast by any light sources. The <I>self</I> parameter can be set for surfacelights for finer subdivided lighting, but should be set to 0 for sky shaders since they don't have lightmaps. The <I>other</I> parameter should be set just high enough to eliminate the "stadium shadow" effect sometimes produced by <A HREF="ch3.htm#skylight"><I>q3map_skylight</I></A> or to smooth out the lighting on surfacelights. If using a value higher than 4 for the <I>iterations</I> parameter on <A HREF="ch3.htm#skylight"><I>q3map_skylight</I></A>, you don't need <I>q3map_lightmapFilterRadius</I> as much, but at the expense of higher compile times. <I>q3map_lightmapFilterRadius</I> should be placed before any light related shader directives that you want it to affect. (see <A HREF="apI.htm">Appendix I: Light Emitting Shaders</A>)<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="lightmapgamma"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_lightmapGamma <I>N.N</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Deprecated! Use <I><A HREF="ch3.htm#lightmapbrightness">q3map_lightmapBrightness</A></I> instead.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="lightmapmergable"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_lightmapMergable</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Allows terrain to be mapped onto a single lightmap page for seamless terrain shadows. It will specify that the shaders using it can merge nonplanars together onto a single lightmap, so you can have a single 512x512 lightmap across a terrain entity.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="lightmapsampleoffset"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_lightmapSampleOffset <I>distance</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Takes a single parameter, defaulting to 1.0, which specifies how many units off a surface should Q3Map2 sample lighting from. Use larger values (2.0-8.0) if you're getting ugly splotches on lightmapped terrain.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="lightmapsamplesize"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_lightmapSampleSize <I>N</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Surfaces using a shader with this option will have the pixel size of the lightmaps set to (NxN). This option can be used to produce high-resolution shadows on certain surfaces. In addition, it can be used to reduce the size of lightmap data, where high-resolution shadows are not required. The default <I>Quake III</I> lightmap sample size is 16.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="lightmapsize"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_lightmapSize <I>width height</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Specifies the size of the lightmap texture that surface lightmaps get packed on to. Used mainly in <I>Enemy Territory</I> for terrain lightmaps (512x512) in concert with the Q3Map2 switch -lightmapsize.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="lightrgb"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_lightRGB <I>red green blue</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


This forces a specified color of light to be emitted from a surface or sky light, rather than sampling colors from a lightimage, editor image or the texture map. Three normalized color values of light are required for the <I>red green blue</I> parameters. This does not affect bounced light in radiosity or lightfilter.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="lightstyle"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_lightStyle <I>N</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Used to set light styles on surface lights for lightmap flickering/waveform effects. N takes the form of a number between 1 and 31, that references the corresponding style number set in the worldspawn entity. Equivalent to setting "style" "N" on a light entity (see <A HREF="'+address+'.htm">Appendix G: Lightstyles</A>).<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="lightsubdivide"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_lightSubdivide <I>N</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Used on surface lights (see <A HREF="ch3.htm#surfacelight"><I>q3map_surfacelight</I></A>). Chops up the surface into smaller polygons for more uniform lighting. It defaults to 120 game units, but can be made larger or smaller as needed (for light surfaces at the bottom of cracks, for example). This can be a dominant factor in processing time for Q3Map2 lighting. Can have an increasingly "darker" effect when used with -fast. Compensate by raising the surface light value. For sky shaders, use <A HREF="ch3.htm#skylight"><I>q3map_skylight</I></A> instead (see <A HREF="apI.htm">Appendix I: Light Emitting Shaders</A>).<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="noclip"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_noClip</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


You might have noticed that terrain has been made to not clip or t-junction anymore. It was causing too many issues, so a new parameter was added: <I>q3map_noClip</I>. Normally, Q3Map2 clips all faces to the BSP, and then takes the minimum polygon that encompasses all visible fragments. <I>q3map_noClip</I> forces Q3Map2 to uses the original brush faces (This is implicit for autosprite(2) surfaces). Therefore, if you map tidy, you could theoretically use <I>q3map_noClip</I> on all your shaders. <I>q3map_noClip</I> and <I>q3map_noTJunc</I>, when used in combination, will preserve mesh geometry exactly as you make it.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="nofast"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_noFast</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


When used on surfaces that emit light, this will disable -fast optimizations. This is useful for large areas of dim sky, where you want the dim light to reach all surfaces. This shader keyword prevents fast from affecting dim sky surfaces. It is necessary, if you can't do a workaround with brighter skies or by using a larger <I>q3map_lightSubdivide</I> value.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="nofog"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_noFog</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Volumes marked with a shader containing this keyword will not be affected by fog.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="nonplanar"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_nonPlanar</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->

Instructs Q3Map2 to merge any adjacent triangles that don't lie in the same plane into a non-planar triangle soup. This allows shadows to be cast correctly across non-planar edges. It is typically used on lightmapped terrain shaders.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="normalimage"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_normalImage <I>texturename</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Allow the use of a normal (height) map to simulate textured bumpmapping. This isn't real bumpmapping per se, but generates a static lightmap image that reflects the normal map and light source.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="notjunc"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_noTJunc</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Read as "no T-Junc". With this option, surfaces modified by a shader are not used for T-junction fixing. <I>q3map_noClip</I> and <I>q3map_noTJunc</I>, used in combination will preserve mesh geometry exactly as you make it.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="novertexlight"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_noVertexLight <I></I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->

blah<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="novertexshadows"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_noVertexShadows</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Obsolete!<BR>
Vertex lighting code was rewritten a couple of times, rendering this keyword irrelevant. Shaders that are used on misc_models or terrain were to use <I>q3map_noVertexShadows</I> to disable shadows being cast on the vertex lit surfaces. Casting shadows at small, misc_model objects often makes sense. However, having shadows on large, vertex lit terrain surfaces often looks bad. Shadows are not cast on forced_vertes_lit surfaces by default (shaders with pointlight).<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="offset"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_offset <I>N.N</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Offsets a surface along the vertex normals N.N units. Used in celshading.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="patchshadows"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_patchShadows</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Obsolete!<BR>
When this option is used in conjunction with the original lighting algorithm (-light), surfaces with textures modified with this option will show shadows that are cast by curve patches. Curve patches do not cast shadows by default.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="remapshader"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_remapShader <I>shadername</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->

Allows shaders to be subclassed. Subclassed shaders can reference the remap shader by referencing the remap shader's name. In order for this to work, the remap shader must be specified before any shaders that references it. Subclassed shaders must contain Q3Map2 and editor relevant portions only (q3map_*, surfaceparm and qer_* directives).<BR><BR>

This is fundamentally the reverse of <A HREF="ch3.htm#baseshader"><I>q3map_baseShader</I></A>. Use <I>q3map_baseShader</I> when a single group of q3map_* directives is required for multiple base shaders. Use <I>q3map_remapShader</I> when similar shaders are used that require different groups of q3map_* directives.<BR><BR>

<B>Design Notes:</B><BR>
Since the subclassed shaders that are applied to geometry does not contain any texture stages, <A HREF="ch5.htm#editorimage"><I>qer_editorImage</I></A> is usually required in conjunction with <I>q3map_remapShader</I>.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="replicate"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_replicate</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Does not exist!<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="rgbgen"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_rgbGen <I></I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->

blah<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="rgbmod"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_rgbMod <I></I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->

blah<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="shadeangle"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_shadeAngle <I>angle</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->

Specifies the breaking angle for phong shading. This allows for smooth shadows between brush faces like patches. The <I>angle</I> parameter is the angle between adjacent faces at which smoothing will start to occur. Typical values are usually in the 120-179 range.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="skylight"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_skylight <I>amount iterations</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


This replaces <I>q3map_surfacelight</I> and <I>q3map_lightSubdivide</I> on sky surfaces for much faster and more uniform sky illumination. <I>Amount</I> is a brightness value, similar to what you would use in <I>q3map_sun</I>. Good values are between 50 and 200. <I>Iterations</I> is an exponential factor. 3 is the best value that balances speed and quality. Values of 4 and 5 are higher quality at the expense of higher compile time. Values below 3 are not too useful<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="splotchfix"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_splotchFix</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


This is used on lightmapped model shaders if splotched lighting artifacts appear. Any shadows at the ambient/dark level will be flooded from neighbouring luxels. This gets rid of shadow acne, but a surface must be more or less uniformly lit or this looks ugly. Try using <I><A HREF="ch3.htm#lightmapsampleoffset">q3map_lightmapSampleOffset</A></I> first before using this as a last resort.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="stylemarker"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_styleMarker <I></I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


For use on shaders that accompany style lights. For any shaders that may be hit by a styled light, add <I>q3map_styleMarker</I> after the lightmap stage and before the texture stages so Q3Map2 can properly create the fake lightmap stages (see <A HREF="'+address+'.htm">Appendix G: Lightstyles</A>).<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="stylemarker2"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_styleMarker2 <I></I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Similar to <I><A HREF="ch3.htm#stylemarker">q3map_styleMarker</A></I> except it is used on masked textures where a depthFunc equal is required.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="sun"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_sun <I>red green blue intensity degrees elevation</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


This keyword in a sky shader will create the illusion of light cast into a map by a single, infinitely distance parallel light source (sun, moon, hellish fire, etc.). This is only processed during the lighting phase of Q3Map2. While still perfectly usable, q3map_sun is now deprecated in favour for q3map_sunExt (see below).<BR><BR>

<UL>
<B><I>red green blue</I></B> : Color is described by three normalized RGB values. Color will be normalized to a 0.0 to 1.0 range, so it doesn't matter what range you use.<BR><BR>
<B><I>intensity</I></B> : The brightness of the generated light. A value of 100 is a fairly bright sun. The intensity of the light falls off with angle but not distance.<BR><BR>
<B><I>degrees</I></B> : The angle relative to the directions of the map file. A setting of 0 degrees equals east. 90 is north, 180 is west and 270 is south. In the original version of Q3Map, non-axial values had a tendency to produce jagged shadows. With Q3Map2, this problem is avoided with new options like lightmap filtering, raytracing and penumbra effects.<BR><BR>
<B><I>elevation</I></B> : The distance, measured in degrees from the horizon (z value of zero in the map file). An elevation of 0 is sunrise/sunset. An elevation of 90 is noon.<BR><BR>
</UL>

<B>Design Notes:</B><BR>
Sky shaders should probably still have a <I>q3map_surfacelight</I> or preferred <I>q3map_skylight</I> value. The "sun" gives a strong directional light, but doesn't necessarily give the fill light needed to soften and illuminate shadows. Skies with clouds should probably have a weaker <I>q3map_sun</I> value and a higher <I>q3map_surfacelight</I> or <I>q3map_skylight</I> value. Heavy clouds diffuse light and weaken shadows. The opposite is true of a cloudless or nearly cloudless sky. In such cases, the "sun" or "moon" will cast stronger shadows that have a greater degree of contrast. This is also why <I>q3map_sunExt</I> is preferred. It gives the designer greater control over shadow contrast with a penumbra effect.<BR><BR>

<B>Design Trick:</B><BR>
Not certain what color formula you want to use for the sun's light? Try this. Create a light entity. Use the Radiant editor's color selection tools to pick a color. The light's _color key's value will be the normalized RGB formula. Copy it from the value line in the editor (CTRL+c) and paste it into your shader.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="sunExt"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_sunExt <I>red green blue intensity degrees elevation deviance samples</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Works like <I>q3map_sun</I> with the addition of two new parameters to create "light jittering" for penumbra (half-shadow) effects. This gives you much more realistic shadows from the sun, especially when trying to simulate a cloudy day or a wide sun. The penumbra effect can also be applied to entity lights (point, spot or sun) with the <I>_deviance N</I> (distance in world units for point/spot lights and degrees for suns) and <I>_samples N</I> (number of samples) key/value pairs.<BR><BR>

<UL>
<B><I>deviance</I></B> : The number of degrees for the half-shadow. General values up to 2 or 3 are acceptable. The real sun has a solid angle of about half a degree.<BR><BR>
<B><I>samples</I></B> : The number of random jitters distributed over the solid arc (~16).<BR><BR>
</UL>


<!--// TITLE START //-->
<BR><A NAME="sunlight"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_sunlight</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Does not exist!<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="surfacelight"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_surfacelight <I>value</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


The texture gives off light equal to the <I>value</I> set for it. The relative surface area of the texture in the world affects the actual amount of light that appears to be radiated. To give off what appears to be the same amount of light, a smaller texture must be significantly brighter than a larger texture. Unless the <I>q3map_lightImage</I> keyword is used to select a different source for the texture's light color information, the color of the light will be the averaged color of the texture. For sky shaders, use <I>q3map_skylight</I> instead for faster and more uniform sky illumination.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="surfacemodel"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_surfaceModel <I>modelpath density odds minscale maxscale minangle maxangle oriented</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


A surface with <I>q3map_surfaceModel</I> in its shader will randomly place a specified model across it's face. This is designed to place grass or tree models over terrain.

<UL>
<B><I>modelpath</I></B> : The path to the model file (any supported format).<BR><BR>
<B><I>density</I></B> : The density of the models, in game units.<BR><BR>
<B><I>odds</I></B> : The odds of the model appearing (normalized?).<BR><BR>
<B><I>minscale</I></B> : The minimum scale of the model from its original size of 1.0.<BR><BR>
<B><I>maxscale</I></B> : The maximum scale of the model from its original size of 1.0.<BR><BR>
<B><I>minangle</I></B> : The model's minimum angle of rotation.<BR><BR>
<B><I>maxangle</I></B> : The model's maximum angle of rotation.<BR><BR>
<B><I>oriented</I></B> : This is a flag, either 0 or 1, and sets whether the model gets fitted to the orientation of the surface.<BR><BR>
</UL>


<!--// TITLE START //-->
<BR><A NAME="tcgen"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_tcGen <I>func ---</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


This currently supports two functions, <I>vector</I> and <I>ivector</I>. Both functions are used for texture projection and do the exact same thing. The only difference is in the math, ivector was designed to be more intuitive.<BR><BR>

<BR><B>q3map_tcGen <I>vector sVector tVector</I></B><BR>
Projects a texture Ns units by Nt units along a chosen axis. <I>q3map_tcGen vector ( 1/256 0 0 ) ( 0 1/256 0 )</I> will project a texture every 256 units in x, and every 256 units in y, along the z-axis.<BR><BR>

<BR><B>q3map_tcGen <I>ivector 1.0/sVector 1.0/tVector</I></B><BR>
Projects a texture Ns units by Nt units along a chosen axis. <I>q3map_tcGen ivector ( 256 0 0 ) ( 0 256 0 )</I> will project a texture every 256 units in x, and every 256 units in y, along the z-axis. Ivector means inverse vector, and this means you won't have to do the divide with a calculator. Inverse = 1.0/n, unless the value is 0, then the matrix value is set to 0. A bit of dodgy math, but it works.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="tcmod"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_tcMod <I>func ---</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


This works in a similar manner to the stage specific <I>tcMod</I> keyword (see Chapter 6 <A HREF="ch6.htm#tcMod">tcMod</A>), except in the compiler, so that modified texture coordinates are "baked" into the surface. This lets you set up less obvious texture tiling on natural and organic surfaces (especially terrain).<BR><BR>

<BR><B>q3map_tcMod <I>rotate degrees</I></B><BR>
Rotates the texture (around origin, not center) a specified number of degrees.<BR><BR>

<BR><B>q3map_tcMod <I>scale s-scale t-scale</I></B><BR>
Scales S (x) and T (y) texture co-ordinates. <I>scale 2 2</I> would halve the size of the texture (doubling the texture co-ordinates).<BR><BR>

<BR><B>q3map_tcMod <I>translate</I> or <I>move</I> or <I>shift s-offset t-offset</I></B><BR>
Shifts texture co-ordinates by S, T amount. <I>translate 0.5 0</I> would shift it one-half in S, and none in T.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="terrain"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_terrain</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Alphamap terrain shaders (typically textures/common/terrain and terrain2) must have the <I>q3map_terrain</I> keyword. Terrain is handled completely differently from previous versions. Q3Map2 no longer looks for the word terrain in the shader name to determine whether or not it is an indexed shader. It looks for <I>q3map_indexed</I>, or <I>q3map_terrain</I>, which then sets off a bunch of stuff shoehorned into it, like: the lightmap axis, texture projection, etc.<BR><BR>

By default, <I>q3map_terrain</I> sets the following:
<UL>
	q3map_tcGen ivector ( 32 0 0 ) ( 0 32 0 )<BR>
	q3map_lightmapAxis z<BR>
	q3map_nonplanar<BR>
	q3map_shadeAngle 180 (maybe 175?)<BR>
	q3map_indexed
</UL>


<!--// TITLE START //-->
<BR><A NAME="tesssize"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_tessSize <I>amount</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


This controls the tessellation size (how finely a surface is chopped up in to triangles), in game units, of the surface. This is only applicable to solid brushes, not curves, and is generally only used on surfaces that are flagged with the <I>deformVertexes</I> keyword. Abuse of this can create a huge number of triangles. This happens during Q3Map2 processing, so maps must be reprocessed for changes to take effect. The poorly named <I>tessSize</I> keyword still works but has been deprecated in favour of <I>q3map_tessSize</I> for the sake of consistency.<BR><BR>

<B>Design Notes:</B><BR>
It can also be used on tessellating surfaces to make sure that tessellations are large and thus, less costly in terms of triangles created.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="texturesize"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_textureSize <I>X Y</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Deprecated. Useful when you don't specify an editor or light image for a shader. Recent builds of Q3Map2 will find some referenced image in a shader and use that as a fallback. Historically, this was used for surface splitting for RTCW for PS2, to accommodate the hardware's limited texture range precision.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="tracelight"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_traceLight</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Obsolete!<BR>
Surfaces using a shader with this option will always be lit with the original light algorithm. Patches will not cast shadows on this surface, unless the shader option <I>q3map_patchShadows</I> is also used.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="vertexscale"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_vertexScale <I>scale</I></B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


The light value, at the vertices of a surface using a shader with this option, is multiplied by the scale value. This is a way to lighten, or darken, a vertex_lit surface, in comparison to other lightmap_lit surfaces around it.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="vertexshadows"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_vertexShadows</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Obsolete! (See <A HREF="ch3.htm#novertexshadows">q3map_noVertexShadows</A>)<BR>
By default, no shadows are cast on vertex_lit_surfaces (see <I>surfaceparm pointlight</I>). In addition, when running <I>Quake III Arena</I> in vertex light, no shadows are cast upon any surface at all, since shadows are part of the lightmap. When using this shader keyword, shadows will be cast on surfaces that are vertex lit. However, sharp shadow edges won't be seen on the surfaces, since light values are only calculated at the vertices.<BR><BR>


<!--// TITLE START //-->
<BR><A NAME="vlight"></A><TABLE><TR><TD><IMG SRC="images/q3logo.jpg"></TD>
<TD><FONT SIZE="3"><B>q3map_vlight</B></FONT></TD></TR></TABLE><BR>
<!--// TITLE END //-->


Obsolete!<BR><BR>


<!--// FOOTER START //-->
<BR><BR><HR SIZE="1"><CENTER><FONT SIZE="1">
<A HREF="ch2.htm">Previous</A> | <A HREF="contents.htm">Contents</A> | <A HREF="ch4.htm">Next</A>
</FONT><BR><BR><BR>
<!--// FOOTER END //-->


	</FONT></TD>
</TR>
</TABLE>
</FONT>
</BODY>
</HTML>